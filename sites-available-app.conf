# HTTP to HTTPS redirect for all domains
server {
    listen 80;
    server_name jimploof.com www.jimploof.com jamesploof.com www.jamesploof.com portfolio.jimploof.com;

    # Redirect all HTTP traffic to HTTPS for jimploof.com
    return 301 https://jamesploof.com$request_uri;
}

# SSL configuration and redirection for jimploof.com
server {
    listen 443 ssl;
    server_name jimploof.com www.jimploof.com portfolio.jimploof.com;

    # SSL certificates specific to jimploof.com
    ssl_certificate /etc/letsencrypt/live/jimploof.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/jimploof.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Redirect to jamesploof.com
    return 301 https://jamesploof.com$request_uri;
}

# SSL configuration for jamesploof.com
server {
    listen 443 ssl;
    server_name jamesploof.com;

    # SSL certificates specific to jamesploof.com
    ssl_certificate /etc/letsencrypt/live/jamesploof.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/jamesploof.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # uWSGI serving the Flask application
    location / {
        include uwsgi_params;
        uwsgi_pass unix:/var/www/resume/resume.sock;

        # Pass GeoIP2 data as headers to Flask
        uwsgi_param X-GeoIP2-Country-Code $geoip2_data_country_code;
        uwsgi_param X-GeoIP2-Country-Name $geoip2_data_country_name;
        uwsgi_param X-GeoIP2-City-Name $geoip2_data_city_name;
        uwsgi_param X-GeoIP2-Latitude $geoip2_data_latitude;
        uwsgi_param X-GeoIP2-Longitude $geoip2_data_longitude;
    }

    location /socket.io/ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Upgrade the connection to WebSocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";

        # Pass WebSocket requests to uWSGI through the Unix socket
        proxy_pass http://unix:/var/www/resume/resume.sock;

        # WebSocket-specific timeout configurations
        proxy_read_timeout 3600;
        proxy_send_timeout 3600;
        proxy_connect_timeout 3600;
    }


    # Proxy all requests to Go backend
    location /go/ {
        proxy_pass http://localhost:8080/;  # Proxying all Go backend requests
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support for Go backend
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
    }

    # Improve security by adding HTTP headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
}

error_log /var/log/nginx/websocket_error.log debug;
